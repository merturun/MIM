@model MIM.Models.User
@{
    Layout = null;
    string modal_size = "modal-lg"; // "modal-sm" "modal", "modal-lg" "modal-xl"
    bool grant = Model == null;
}
@if (grant)
{
    <link href="~/assets/css/chosen.css" rel="stylesheet" />
    <script src="~/assets/js/chosen.jquery.js"></script>
    <div class="modal" id="user-modal">
        <div class="modal-dialog modal-dialog-centered @modal_size">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">@LanguageHelper.GetString("User.ModalTitle.Add")</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                </div><div class="container"></div>
                      <div style="padding-bottom: 0px;" class="modal-body">
                          @using (Ajax.BeginForm("Create", "Users", new AjaxOptions { HttpMethod = "POST", OnSuccess = "GetTable()", OnFailure = "" }, new { id = "usercreate", enctype = "multipart/form-data" }))
                          {
                              @Html.AntiForgeryToken()

                              @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                              <div class="form-group row align-items-center">
                                  @Html.LabelFor(model => model.TitleID, @LanguageHelper.GetStringForModal("User.Title"), htmlAttributes: new { @class = "control-label col-2 font-weight-bold  my-auto" })
                                  <div class="col-4">
                                      @Html.DropDownList("titleID", null, @LanguageHelper.GetStringForModal("Dropdown.First"), htmlAttributes: new { @class = "form-control" })
                                      @Html.ValidationMessageFor(model => model.TitleID, "", new { @class = "text-danger" })
                                  </div>
                                  @Html.LabelFor(model => model.DepartmentID, @LanguageHelper.GetStringForModal("Department.Manager"), htmlAttributes: new { @class = "control-label col-2 font-weight-bold  my-auto" })
                                  <div class="col-4">
                                      @Html.DropDownList("DepartmentID", null, @LanguageHelper.GetStringForModal("Dropdown.First"), htmlAttributes: new { @class = "form-control" })
                                      @Html.ValidationMessageFor(model => model.DepartmentID, "", new { @class = "text-danger" })
                                  </div>
                              </div>

                              <div class="form-group row align-items-center">
                                  @Html.LabelFor(model => model.Firstname, @LanguageHelper.GetStringForModal("User.Firstname"), htmlAttributes: new { @class = "control-label col-2 font-weight-bold my-auto" })
                                  <div class="col-4">
                                      @Html.EditorFor(model => model.Firstname, new { htmlAttributes = new { @class = "form-control" } })
                                      @Html.ValidationMessageFor(model => model.Firstname, "", new { @class = "text-danger" })
                                  </div>
                                  @Html.LabelFor(model => model.Lastname, @LanguageHelper.GetStringForModal("User.Lastname"), htmlAttributes: new { @class = "control-label col-2 font-weight-bold my-auto" })
                                  <div class="col-4">
                                      @Html.EditorFor(model => model.Lastname, new { htmlAttributes = new { @class = "form-control" } })
                                      @Html.ValidationMessageFor(model => model.Lastname, "", new { @class = "text-danger" })
                                  </div>
                              </div>


                              <div class="form-group row align-items-center">
                                  @Html.LabelFor(model => model.Nickname, @LanguageHelper.GetStringForModal("User.Nickname"), htmlAttributes: new { @class = "control-label col-2 font-weight-bold my-auto" })
                                  <div class="col-4">
                                      @Html.EditorFor(model => model.Nickname, new { htmlAttributes = new { @class = "form-control" } })
                                      @Html.ValidationMessageFor(model => model.Nickname, "", new { @class = "text-danger" })
                                  </div>
                                  @Html.LabelFor(model => model.Username, @LanguageHelper.GetStringForModal("User.Username"), htmlAttributes: new { @class = "control-label col-2 font-weight-bold my-auto" })
                                  <div class="col-4">
                                      @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control" } })
                                      @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
                                  </div>
                              </div>

                              <div class="form-group row align-items-center">
                                  @Html.LabelFor(model => model.Password, @LanguageHelper.GetStringForModal("User.Password"), htmlAttributes: new { @class = "control-label col-2 font-weight-bold my-auto" })
                                  <div class="col-4">
                                      @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                                      @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                                  </div>
                                  @Html.LabelFor(model => model.Email, @LanguageHelper.GetStringForModal("User.Email"), htmlAttributes: new { @class = "control-label col-2 font-weight-bold my-auto" })
                                  <div class="col-4">
                                      @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                      @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                  </div>
                              </div>

                              <div class="form-group row align-items-center">
                                  @Html.LabelFor(model => model.BornDate, @LanguageHelper.GetStringForModal("User.BornDate"), htmlAttributes: new { @class = "control-label col-2 font-weight-bold my-auto" })
                                  <div class="col-lg-4 col-md-9 col-sm-12">
                                      <div class="input-group date">
                                          @Html.EditorFor(model => model.BornDate, new { htmlAttributes = new { type = "text", @class = "form-control" } })
                                          <div class="input-group-append">
                                              <span class="input-group-text">
                                                  <i class="la la-calendar"></i>
                                              </span>
                                          </div>
                                      </div>
                                      @Html.ValidationMessageFor(model => model.BornDate, "", new { @class = "text-danger" })

                                  </div>
                              </div>
                              <div class="form-group row">
                                  @Html.LabelFor(model => model.IsActive, @LanguageHelper.GetStringForModal("User.IsActive"), htmlAttributes: new { @class = "col-3 col-form-label my-auto" })
                                  <div class="col-3">
                                      <span class="switch switch-lg switch-icon">
                                          <label>
                                              @Html.CheckBoxFor(model => model.IsActive, new { id = "isActive", @checked = "checked" })
                                              <span></span>
                                          </label>
                                      </span>
                                  </div>
                                  @if (MIM.Models.User.Current().SuperAdmin == true)
                                  {
                                      @Html.LabelFor(model => model.SuperAdmin, @LanguageHelper.GetStringForModal("User.SuperAdmin"), htmlAttributes: new { @class = "col-3 col-form-label my-auto" })
                                      <div class="col-3">
                                          <span class="switch switch-lg switch-icon">
                                              <label>
                                                  @Html.CheckBoxFor(model => model.SuperAdmin, new { id = "superAdmin", @checked = "checked" })
                                                  <span></span>
                                              </label>
                                          </span>
                                      </div>
                                  }
                                  else
                                  {
                                      @Html.HiddenFor(model => model.SuperAdmin)
                                  }
                              </div>
                              <div class="form-group">
                                  @Html.LabelFor(model => model.AvatarUrl, @LanguageHelper.GetStringForModal("User.AvatarUrl"), htmlAttributes: new { @class = "control-label font-weight-bold my-auto" })
                                  <br />
                                  <div class="image-input" id="kt_image_2">
                                      <div class="image-input-wrapper" id="Avatar" style="background-image: url('/assets/media/AvatarImages/noavatar.png')"></div>
                                      <label class="btn btn-xs btn-icon btn-circle btn-white btn-hover-text-primary btn-shadow" data-action="change" data-toggle="tooltip" title="" data-original-title="Change avatar">
                                          <i class="fa fa-pen icon-sm text-muted"></i>
                                          @Html.TextBox("fb", "", htmlAttributes: new { @type = "file", accept = ".jpg, .png", name = "profile_avatar" })
                                          @*<input type="file"  accept=".png, .jpg, .jpeg" />*@
                                          <input type="hidden" name="profile_avatar_remove" />
                                      </label>
                                      <span id="ccbtn" class="btn btn-xs btn-icon btn-circle btn-white btn-hover-text-primary btn-shadow"  data-action="cancel" data-toggle="tooltip" title="Cancel avatar">
                                          <i class="ki ki-bold-close icon-xs text-muted"></i>
                                      </span>
     
                                  </div>
                              </div>
                              <h3>@LanguageHelper.GetString("User.Groups")</h3>
                              <hr class="chr" />
                              <div class="form-group">
                                  <div class="col-12">
                                      @Html.DropDownList("GroupIDS", (List<SelectListItem>)ViewBag.Groups, htmlAttributes: new { @class = "form-control chosen-select col-12", multiple = "multiple" })
                                      @Html.ValidationMessageFor(model => model.Groups, "", new { @class = "text-danger" })
                                  </div>
                              </div>

                              <div class="modal-footer">
                                  <input class="btn btn-primary col-2" data-dismiss="modal" value="@LanguageHelper.GetString("Modal.Button.Cancel")" />
                                  <input class="btn btn-success" type="submit" value="@LanguageHelper.GetString("Modal.Button.Create")" />
                              </div>
                          }
                      </div>
            </div>
        </div>
    </div>
    <script>
        $('.chosen-select').chosen({ placeholder_text_multiple: "@Html.Raw(@LanguageHelper.GetString("Dropdown.First"))"});
        $('#GroupIDS_chosen').css("width", "100%");
        var arrows = {
            leftArrow: '<i class="la la-angle-left"></i>',
            rightArrow: '<i class="la la-angle-right"></i>'
        }

        $('#bornDate, #kt_datepicker_3_validate').datepicker({
            rtl: KTUtil.isRTL(),
            todayBtn: "linked",
            format: 'dd/mm/yyyy',
            clearBtn: true,
            todayHighlight: true,
            templates: arrows
        });
        var avatar2 = new KTImageInput('kt_image_2');

        function cancel() {
            var avatar = $('#Avatar').css('background-image');
            var yeni = avatar.substr(0, avatar.indexOf('AvatarImage') + 13) + 'noavatar.png")';
            var avatar = $('#Avatar').css('background-image', yeni);
        }

        $("#ccbtn").click(function () {
            cancel()
        });
        function GetTable() {
            $("#user-modal").modal('hide');
            toastr.success("@LanguageHelper.GetString("Model.Toastr.AddSuccess")", "@LanguageHelper.GetString("Model.User")")
            $.ajax({
                url: '/Users/Table',
                method: 'GET',
                success: function (data) {
                    $('#dt-users_table').html(data)
                },
                error: function (data) {
                    $('#dt-users_table').html("table error")
                },
            });
        };
    </script>
}
else
{
    <script>
    toastr.error('@LanguageHelper.GetString("Model.Toastr.NoGrant")', '@LanguageHelper.GetString("Model.User")')
    </script>
}